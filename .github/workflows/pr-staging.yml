# This is a basic workflow to help you get started with Actions
name: 'TestingDevlop pull request check'

# Controls when the workflow will run
on:
  pull_request:
    #branches: [ $GITHUB_BASE_REF]
    branches: [ master, staging, develop, TestingDevlop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Install Salesforce CLI
      - name: 'Build and Deploy'
        run: |
            wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
            mkdir sfdx-cli
            tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
            ./sfdx-cli/install
                  
      # Decrypt file
      - name: 'Decrypt file'
        run: openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out server.key -base64 -K ${{secrets.DECRYPTION_KEY}} -iv ${{secrets.DECRYPTION_IV}}
              
      # Authorize TestingDevlop
      - name: 'Authorize TestingDevlop'
        if: ${{ github.base_ref == 'TestingDevlop'}}
        run: sfdx auth:jwt:grant --clientid=${{secrets.CONSUMER_KEY}} --username=${{secrets.USERNAME}} --instanceurl=${{secrets.SFDC_Login_URL}} --jwtkeyfile server.key --setdefaultdevhubusername --setalias=hub-org

      # Authorize develop
      - name: 'Authorize develop'
        if: ${{ github.base_ref == 'develop'}}
        run: sfdx auth:jwt:grant --clientid=${{secrets.CONSUMER_KEY}} --username=${{secrets.USERNAME}} --instanceurl=${{secrets.SFDC_Login_URL}} --jwtkeyfile server.key --setdefaultdevhubusername --setalias=hub-org
        
      # Authorize staging
      - name: 'Authorize staging'
        if: ${{ github.base_ref == 'staging'}}
        run: sfdx auth:jwt:grant --clientid=${{secrets.FULLCOPY_CONSUMER_KEY}} --username=${{secrets.FULLCOPY_USERNAME}} --instanceurl=${{secrets.SFDC_Login_URL}} --jwtkeyfile server.key --setdefaultdevhubusername --setalias=hub-org

        # Authorize master
      - name: 'Authorize master'
        if: ${{ github.base_ref == 'master'}}
        run: sfdx auth:jwt:grant --clientid=${{secrets.FULLCOPY_CONSUMER_KEY}} --username=${{secrets.FULLCOPY_USERNAME}} --instanceurl=${{secrets.SFDC_Login_URL}} --jwtkeyfile server.key --setdefaultdevhubusername --setalias=hub-org
        #run: sfdx auth:jwt:grant --clientid=${{secrets.CONSUMER_KEY}} --username=${{secrets.USERNAME}} --instanceurl=${{secrets.SFDC_Login_URL}} --jwtkeyfile server.key --setdefaultdevhubusername --setalias=hub-org
      
      # Create Delta
      - name: 'Install App and Create Delta'
        run: |
          sudo npm install sfdx-git-delta@latest -g
          git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
          git fetch --all
          git checkout -b pr
          git --no-pager diff --name-status pr origin/$GITHUB_BASE_REF
          sgd --to pr --from origin/$GITHUB_BASE_REF --repo . --output .
          cat package/package.xml
      
      # convert
      - name: 'Convert Metadata'
        run: sfdx force:source:convert --manifest=package/package.xml --outputdir=convert
      
      # TestConfluence
      - name: Read TestConfluence
        id: testconfluence
        uses: juliangruber/read-file-action@v1
        with:
          path: assets/TestConfluence.txt
          trim: true
      
      # Print TestConfluence content
      - name: Echo package.json
        run: echo "${{steps.testconfluence.outputs.content}} $GITHUB_REF $GITHUB_BASE_REF"  

      # Run Apex tests
      - name: 'Run Apex tests on metadata'
        run:  sfdx force:mdapi:deploy --deploydir=convert --testlevel=RunSpecifiedTests --runtests=${{steps.testconfluence.outputs.content}} --checkonly -u hub-org -w30
        