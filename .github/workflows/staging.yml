# This is a basic workflow to help you get started with Actions

name: 'TestingDevlop Push'

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ staging, develop, TestingDevlop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Get banch name (Merge)
      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
        
      # Print  
      - name: Debug
        run: echo ${{ env.BRANCH_NAME }}

      # Install Salesforce CLI
      - name: 'Build and Deploy'
        run: |
            wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
            mkdir sfdx-cli
            tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
            ./sfdx-cli/install
                  
      # Decrypt file
      - name: 'Decrypt file'
        run: openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out server.key -base64 -K ${{secrets.DECRYPTION_KEY}} -iv ${{secrets.DECRYPTION_IV}}

      # Authorize TestingDevlop
      - name: 'Authorize TestingDevlop'
        if: ${{ env.BRANCH_NAME == 'TestingDevlop' }}
        run: sfdx auth:jwt:grant --clientid=${{secrets.CONSUMER_KEY}} --username=${{secrets.USERNAME}} --instanceurl=${{secrets.SFDC_Login_URL}} --jwtkeyfile server.key --setdefaultdevhubusername --setalias=hub-org

      # Authorize develop
      - name: 'Authorize develop'
        if: ${{ env.BRANCH_NAME == 'develop' }}
        run: sfdx auth:jwt:grant --clientid=${{secrets.CONSUMER_KEY}} --username=${{secrets.USERNAME}} --instanceurl=${{secrets.SFDC_Login_URL}} --jwtkeyfile server.key --setdefaultdevhubusername --setalias=hub-org

      # Authorize staging
      - name: 'Authorize staging'
        if: ${{ env.BRANCH_NAME == 'staging' }}
        run: sfdx auth:jwt:grant --clientid=${{secrets.FULLCOPY_CONSUMER_KEY}} --username=${{secrets.FULLCOPY_USERNAME}} --instanceurl=${{secrets.SFDC_Login_URL}} --jwtkeyfile server.key --setdefaultdevhubusername --setalias=hub-org

      # Create Delta for TestingDevlop branch
      - name: 'Install App and Create Delta for TestingDevlop'
        if: ${{ env.BRANCH_NAME == 'TestingDevlop'}}
        run: |
          sudo npm install sfdx-git-delta@latest -g
          git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
          git fetch --all
          git --no-pager diff --name-status TestingDevlop origin/staging
          sgd --to TestingDevlop --from origin/staging --repo . --output .
          cat package/package.xml
      # Create Delta for develop branch
      - name: 'Install App and Create Delta for develop'
        if: ${{ env.BRANCH_NAME == 'develop'}}
        run: |
          sudo npm install sfdx-git-delta@latest -g
          git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
          git fetch --all
          git --no-pager diff --name-status develop origin/staging
          sgd --to develop --from origin/staging --repo . --output .
          cat package/package.xml
      # Create Delta for staging branch
      - name: 'Install App and Create staging for develop'
        if: ${{ env.BRANCH_NAME == 'staging'}}
        run: |
          sudo npm install sfdx-git-delta@latest -g
          git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
          git fetch --all
          git --no-pager diff --name-status staging origin/master
          sgd --to staging --from origin/master --repo . --output .
          cat package/package.xml
      
      # convert
      - name: 'Convert Metadata'
        run: sfdx force:source:convert --manifest=package/package.xml --outputdir=convert
      
      # TestConfluence
      - name: Read TestConfluence
        id: testconfluence
        uses: juliangruber/read-file-action@v1
        with:
          path: assets/TestConfluence.txt
          trim: true 

      # Run Apex tests
      - name: 'Run Apex tests on metadata'
        run:  sfdx force:mdapi:deploy --deploydir=convert --testlevel=RunSpecifiedTests --runtests=${{steps.testconfluence.outputs.content}} -u hub-org -w30
